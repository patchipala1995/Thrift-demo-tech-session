package generatedstubs;

/**
 * Autogenerated by Thrift Compiler (0.15.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 * 
 * @generated
 */
@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.15.0)", date = "2021-12-13")
public class LoanDto implements org.apache.thrift.TBase<LoanDto, LoanDto._Fields>, java.io.Serializable, Cloneable, Comparable<LoanDto> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("LoanDto");

  private static final org.apache.thrift.protocol.TField LOANID_FIELD_DESC = new org.apache.thrift.protocol.TField("loanid", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField CLOSINGAMOUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("closingamount", org.apache.thrift.protocol.TType.DOUBLE, (short)2);
  private static final org.apache.thrift.protocol.TField INTEREST_FIELD_DESC = new org.apache.thrift.protocol.TField("interest", org.apache.thrift.protocol.TType.DOUBLE, (short)3);
  private static final org.apache.thrift.protocol.TField BALANCEAMOUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("balanceamount", org.apache.thrift.protocol.TType.DOUBLE, (short)4);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new LoanDtoStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new LoanDtoTupleSchemeFactory();

  public int loanid; // required
  public double closingamount; // required
  public double interest; // required
  public double balanceamount; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    LOANID((short)1, "loanid"),
    CLOSINGAMOUNT((short)2, "closingamount"),
    INTEREST((short)3, "interest"),
    BALANCEAMOUNT((short)4, "balanceamount");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // LOANID
          return LOANID;
        case 2: // CLOSINGAMOUNT
          return CLOSINGAMOUNT;
        case 3: // INTEREST
          return INTEREST;
        case 4: // BALANCEAMOUNT
          return BALANCEAMOUNT;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __LOANID_ISSET_ID = 0;
  private static final int __CLOSINGAMOUNT_ISSET_ID = 1;
  private static final int __INTEREST_ISSET_ID = 2;
  private static final int __BALANCEAMOUNT_ISSET_ID = 3;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.LOANID, new org.apache.thrift.meta_data.FieldMetaData("loanid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CLOSINGAMOUNT, new org.apache.thrift.meta_data.FieldMetaData("closingamount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.INTEREST, new org.apache.thrift.meta_data.FieldMetaData("interest", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.BALANCEAMOUNT, new org.apache.thrift.meta_data.FieldMetaData("balanceamount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(LoanDto.class, metaDataMap);
  }

  public LoanDto() {
  }

  public LoanDto(
    int loanid,
    double closingamount,
    double interest,
    double balanceamount)
  {
    this();
    this.loanid = loanid;
    setLoanidIsSet(true);
    this.closingamount = closingamount;
    setClosingamountIsSet(true);
    this.interest = interest;
    setInterestIsSet(true);
    this.balanceamount = balanceamount;
    setBalanceamountIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public LoanDto(LoanDto other) {
    __isset_bitfield = other.__isset_bitfield;
    this.loanid = other.loanid;
    this.closingamount = other.closingamount;
    this.interest = other.interest;
    this.balanceamount = other.balanceamount;
  }

  public LoanDto deepCopy() {
    return new LoanDto(this);
  }

  @Override
  public void clear() {
    setLoanidIsSet(false);
    this.loanid = 0;
    setClosingamountIsSet(false);
    this.closingamount = 0.0;
    setInterestIsSet(false);
    this.interest = 0.0;
    setBalanceamountIsSet(false);
    this.balanceamount = 0.0;
  }

  public int getLoanid() {
    return this.loanid;
  }

  public LoanDto setLoanid(int loanid) {
    this.loanid = loanid;
    setLoanidIsSet(true);
    return this;
  }

  public void unsetLoanid() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __LOANID_ISSET_ID);
  }

  /** Returns true if field loanid is set (has been assigned a value) and false otherwise */
  public boolean isSetLoanid() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __LOANID_ISSET_ID);
  }

  public void setLoanidIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __LOANID_ISSET_ID, value);
  }

  public double getClosingamount() {
    return this.closingamount;
  }

  public LoanDto setClosingamount(double closingamount) {
    this.closingamount = closingamount;
    setClosingamountIsSet(true);
    return this;
  }

  public void unsetClosingamount() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __CLOSINGAMOUNT_ISSET_ID);
  }

  /** Returns true if field closingamount is set (has been assigned a value) and false otherwise */
  public boolean isSetClosingamount() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __CLOSINGAMOUNT_ISSET_ID);
  }

  public void setClosingamountIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __CLOSINGAMOUNT_ISSET_ID, value);
  }

  public double getInterest() {
    return this.interest;
  }

  public LoanDto setInterest(double interest) {
    this.interest = interest;
    setInterestIsSet(true);
    return this;
  }

  public void unsetInterest() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __INTEREST_ISSET_ID);
  }

  /** Returns true if field interest is set (has been assigned a value) and false otherwise */
  public boolean isSetInterest() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __INTEREST_ISSET_ID);
  }

  public void setInterestIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __INTEREST_ISSET_ID, value);
  }

  public double getBalanceamount() {
    return this.balanceamount;
  }

  public LoanDto setBalanceamount(double balanceamount) {
    this.balanceamount = balanceamount;
    setBalanceamountIsSet(true);
    return this;
  }

  public void unsetBalanceamount() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __BALANCEAMOUNT_ISSET_ID);
  }

  /** Returns true if field balanceamount is set (has been assigned a value) and false otherwise */
  public boolean isSetBalanceamount() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __BALANCEAMOUNT_ISSET_ID);
  }

  public void setBalanceamountIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __BALANCEAMOUNT_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case LOANID:
      if (value == null) {
        unsetLoanid();
      } else {
        setLoanid((java.lang.Integer)value);
      }
      break;

    case CLOSINGAMOUNT:
      if (value == null) {
        unsetClosingamount();
      } else {
        setClosingamount((java.lang.Double)value);
      }
      break;

    case INTEREST:
      if (value == null) {
        unsetInterest();
      } else {
        setInterest((java.lang.Double)value);
      }
      break;

    case BALANCEAMOUNT:
      if (value == null) {
        unsetBalanceamount();
      } else {
        setBalanceamount((java.lang.Double)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case LOANID:
      return getLoanid();

    case CLOSINGAMOUNT:
      return getClosingamount();

    case INTEREST:
      return getInterest();

    case BALANCEAMOUNT:
      return getBalanceamount();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case LOANID:
      return isSetLoanid();
    case CLOSINGAMOUNT:
      return isSetClosingamount();
    case INTEREST:
      return isSetInterest();
    case BALANCEAMOUNT:
      return isSetBalanceamount();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof LoanDto)
      return this.equals((LoanDto)that);
    return false;
  }

  public boolean equals(LoanDto that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_loanid = true;
    boolean that_present_loanid = true;
    if (this_present_loanid || that_present_loanid) {
      if (!(this_present_loanid && that_present_loanid))
        return false;
      if (this.loanid != that.loanid)
        return false;
    }

    boolean this_present_closingamount = true;
    boolean that_present_closingamount = true;
    if (this_present_closingamount || that_present_closingamount) {
      if (!(this_present_closingamount && that_present_closingamount))
        return false;
      if (this.closingamount != that.closingamount)
        return false;
    }

    boolean this_present_interest = true;
    boolean that_present_interest = true;
    if (this_present_interest || that_present_interest) {
      if (!(this_present_interest && that_present_interest))
        return false;
      if (this.interest != that.interest)
        return false;
    }

    boolean this_present_balanceamount = true;
    boolean that_present_balanceamount = true;
    if (this_present_balanceamount || that_present_balanceamount) {
      if (!(this_present_balanceamount && that_present_balanceamount))
        return false;
      if (this.balanceamount != that.balanceamount)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + loanid;

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(closingamount);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(interest);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(balanceamount);

    return hashCode;
  }

  @Override
  public int compareTo(LoanDto other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetLoanid(), other.isSetLoanid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLoanid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.loanid, other.loanid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetClosingamount(), other.isSetClosingamount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetClosingamount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.closingamount, other.closingamount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetInterest(), other.isSetInterest());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInterest()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.interest, other.interest);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetBalanceamount(), other.isSetBalanceamount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBalanceamount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.balanceamount, other.balanceamount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("LoanDto(");
    boolean first = true;

    sb.append("loanid:");
    sb.append(this.loanid);
    first = false;
    if (!first) sb.append(", ");
    sb.append("closingamount:");
    sb.append(this.closingamount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("interest:");
    sb.append(this.interest);
    first = false;
    if (!first) sb.append(", ");
    sb.append("balanceamount:");
    sb.append(this.balanceamount);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class LoanDtoStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public LoanDtoStandardScheme getScheme() {
      return new LoanDtoStandardScheme();
    }
  }

  private static class LoanDtoStandardScheme extends org.apache.thrift.scheme.StandardScheme<LoanDto> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, LoanDto struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // LOANID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.loanid = iprot.readI32();
              struct.setLoanidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // CLOSINGAMOUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.closingamount = iprot.readDouble();
              struct.setClosingamountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // INTEREST
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.interest = iprot.readDouble();
              struct.setInterestIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // BALANCEAMOUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.balanceamount = iprot.readDouble();
              struct.setBalanceamountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, LoanDto struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(LOANID_FIELD_DESC);
      oprot.writeI32(struct.loanid);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CLOSINGAMOUNT_FIELD_DESC);
      oprot.writeDouble(struct.closingamount);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(INTEREST_FIELD_DESC);
      oprot.writeDouble(struct.interest);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(BALANCEAMOUNT_FIELD_DESC);
      oprot.writeDouble(struct.balanceamount);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class LoanDtoTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public LoanDtoTupleScheme getScheme() {
      return new LoanDtoTupleScheme();
    }
  }

  private static class LoanDtoTupleScheme extends org.apache.thrift.scheme.TupleScheme<LoanDto> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, LoanDto struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetLoanid()) {
        optionals.set(0);
      }
      if (struct.isSetClosingamount()) {
        optionals.set(1);
      }
      if (struct.isSetInterest()) {
        optionals.set(2);
      }
      if (struct.isSetBalanceamount()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetLoanid()) {
        oprot.writeI32(struct.loanid);
      }
      if (struct.isSetClosingamount()) {
        oprot.writeDouble(struct.closingamount);
      }
      if (struct.isSetInterest()) {
        oprot.writeDouble(struct.interest);
      }
      if (struct.isSetBalanceamount()) {
        oprot.writeDouble(struct.balanceamount);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, LoanDto struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.loanid = iprot.readI32();
        struct.setLoanidIsSet(true);
      }
      if (incoming.get(1)) {
        struct.closingamount = iprot.readDouble();
        struct.setClosingamountIsSet(true);
      }
      if (incoming.get(2)) {
        struct.interest = iprot.readDouble();
        struct.setInterestIsSet(true);
      }
      if (incoming.get(3)) {
        struct.balanceamount = iprot.readDouble();
        struct.setBalanceamountIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

